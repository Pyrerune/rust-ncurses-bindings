--- raw.rs	2020-06-24 17:57:53.009849479 -0400
+++ ffi.rs	2020-06-24 18:30:04.506717358 -0400
@@ -1,5 +1,10 @@
-/* automatically generated by rust-bindgen */
-
+use libc::FILE;
+use core::ffi::c_void;
+type c_uint = u32;
+type c_uchar = u8;
+type c_short = i16;
+type c_int = i32;
+type c_char = i8;
 pub const CURSES: u32 = 1;
 pub const CURSES_H: u32 = 1;
 pub const NCURSES_VERSION_MAJOR: u32 = 6;
@@ -7,98 +12,6 @@
 pub const NCURSES_VERSION_PATCH: u32 = 20200212;
 pub const NCURSES_VERSION: &'static [u8; 4usize] = b"6.2\0";
 pub const NCURSES_MOUSE_VERSION: u32 = 2;
-pub const NCURSES_DLL_H_incl: u32 = 1;
-pub const _STDINT_H: u32 = 1;
-pub const _FEATURES_H: u32 = 1;
-pub const _DEFAULT_SOURCE: u32 = 1;
-pub const __GLIBC_USE_ISOC2X: u32 = 0;
-pub const __USE_ISOC11: u32 = 1;
-pub const __USE_ISOC99: u32 = 1;
-pub const __USE_ISOC95: u32 = 1;
-pub const __USE_POSIX_IMPLICITLY: u32 = 1;
-pub const _POSIX_SOURCE: u32 = 1;
-pub const _POSIX_C_SOURCE: u32 = 200809;
-pub const __USE_POSIX: u32 = 1;
-pub const __USE_POSIX2: u32 = 1;
-pub const __USE_POSIX199309: u32 = 1;
-pub const __USE_POSIX199506: u32 = 1;
-pub const __USE_XOPEN2K: u32 = 1;
-pub const __USE_XOPEN2K8: u32 = 1;
-pub const _ATFILE_SOURCE: u32 = 1;
-pub const __USE_MISC: u32 = 1;
-pub const __USE_ATFILE: u32 = 1;
-pub const __USE_FORTIFY_LEVEL: u32 = 0;
-pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
-pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
-pub const _STDC_PREDEF_H: u32 = 1;
-pub const __STDC_IEC_559__: u32 = 1;
-pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
-pub const __STDC_ISO_10646__: u32 = 201706;
-pub const __GNU_LIBRARY__: u32 = 6;
-pub const __GLIBC__: u32 = 2;
-pub const __GLIBC_MINOR__: u32 = 31;
-pub const _SYS_CDEFS_H: u32 = 1;
-pub const __glibc_c99_flexarr_available: u32 = 1;
-pub const __WORDSIZE: u32 = 64;
-pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
-pub const __SYSCALL_WORDSIZE: u32 = 64;
-pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
-pub const __HAVE_GENERIC_SELECTION: u32 = 1;
-pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
-pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
-pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
-pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
-pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
-pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
-pub const _BITS_TYPES_H: u32 = 1;
-pub const __TIMESIZE: u32 = 64;
-pub const _BITS_TYPESIZES_H: u32 = 1;
-pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
-pub const __INO_T_MATCHES_INO64_T: u32 = 1;
-pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
-pub const __STATFS_MATCHES_STATFS64: u32 = 1;
-pub const __FD_SETSIZE: u32 = 1024;
-pub const _BITS_TIME64_H: u32 = 1;
-pub const _BITS_WCHAR_H: u32 = 1;
-pub const _BITS_STDINT_INTN_H: u32 = 1;
-pub const _BITS_STDINT_UINTN_H: u32 = 1;
-pub const INT8_MIN: i32 = -128;
-pub const INT16_MIN: i32 = -32768;
-pub const INT32_MIN: i32 = -2147483648;
-pub const INT8_MAX: u32 = 127;
-pub const INT16_MAX: u32 = 32767;
-pub const INT32_MAX: u32 = 2147483647;
-pub const UINT8_MAX: u32 = 255;
-pub const UINT16_MAX: u32 = 65535;
-pub const UINT32_MAX: u32 = 4294967295;
-pub const INT_LEAST8_MIN: i32 = -128;
-pub const INT_LEAST16_MIN: i32 = -32768;
-pub const INT_LEAST32_MIN: i32 = -2147483648;
-pub const INT_LEAST8_MAX: u32 = 127;
-pub const INT_LEAST16_MAX: u32 = 32767;
-pub const INT_LEAST32_MAX: u32 = 2147483647;
-pub const UINT_LEAST8_MAX: u32 = 255;
-pub const UINT_LEAST16_MAX: u32 = 65535;
-pub const UINT_LEAST32_MAX: u32 = 4294967295;
-pub const INT_FAST8_MIN: i32 = -128;
-pub const INT_FAST16_MIN: i64 = -9223372036854775808;
-pub const INT_FAST32_MIN: i64 = -9223372036854775808;
-pub const INT_FAST8_MAX: u32 = 127;
-pub const INT_FAST16_MAX: u64 = 9223372036854775807;
-pub const INT_FAST32_MAX: u64 = 9223372036854775807;
-pub const UINT_FAST8_MAX: u32 = 255;
-pub const UINT_FAST16_MAX: i32 = -1;
-pub const UINT_FAST32_MAX: i32 = -1;
-pub const INTPTR_MIN: i64 = -9223372036854775808;
-pub const INTPTR_MAX: u64 = 9223372036854775807;
-pub const UINTPTR_MAX: i32 = -1;
-pub const PTRDIFF_MIN: i64 = -9223372036854775808;
-pub const PTRDIFF_MAX: u64 = 9223372036854775807;
-pub const SIG_ATOMIC_MIN: i32 = -2147483648;
-pub const SIG_ATOMIC_MAX: u32 = 2147483647;
-pub const SIZE_MAX: i32 = -1;
-pub const WINT_MIN: u32 = 0;
-pub const WINT_MAX: u32 = 4294967295;
 pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
 pub const NCURSES_OPAQUE: u32 = 0;
 pub const NCURSES_OPAQUE_FORM: u32 = 0;
@@ -109,32 +22,6 @@
 pub const NCURSES_INTEROP_FUNCS: u32 = 1;
 pub const NCURSES_TPARM_VARARGS: u32 = 1;
 pub const NCURSES_WCWIDTH_GRAPHICS: u32 = 1;
-pub const _STDIO_H: u32 = 1;
-pub const __GNUC_VA_LIST: u32 = 1;
-pub const _____fpos_t_defined: u32 = 1;
-pub const ____mbstate_t_defined: u32 = 1;
-pub const _____fpos64_t_defined: u32 = 1;
-pub const ____FILE_defined: u32 = 1;
-pub const __FILE_defined: u32 = 1;
-pub const __struct_FILE_defined: u32 = 1;
-pub const _IO_EOF_SEEN: u32 = 16;
-pub const _IO_ERR_SEEN: u32 = 32;
-pub const _IO_USER_LOCK: u32 = 32768;
-pub const _IOFBF: u32 = 0;
-pub const _IOLBF: u32 = 1;
-pub const _IONBF: u32 = 2;
-pub const BUFSIZ: u32 = 8192;
-pub const EOF: i32 = -1;
-pub const SEEK_SET: u32 = 0;
-pub const SEEK_CUR: u32 = 1;
-pub const SEEK_END: u32 = 2;
-pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
-pub const _BITS_STDIO_LIM_H: u32 = 1;
-pub const L_tmpnam: u32 = 20;
-pub const TMP_MAX: u32 = 238328;
-pub const FILENAME_MAX: u32 = 4096;
-pub const L_ctermid: u32 = 9;
-pub const FOPEN_MAX: u32 = 16;
 pub const NCURSES_WIDECHAR: u32 = 0;
 pub const TRUE: u32 = 1;
 pub const FALSE: u32 = 0;
@@ -284,1087 +171,19 @@
 pub const TRACE_SHIFT: u32 = 13;
 pub const TRACE_MAXIMUM: u32 = 8191;
 pub const NCURSES_UNCTRL_H_incl: u32 = 1;
-pub type __u_char = ::std::os::raw::c_uchar;
-pub type __u_short = ::std::os::raw::c_ushort;
-pub type __u_int = ::std::os::raw::c_uint;
-pub type __u_long = ::std::os::raw::c_ulong;
-pub type __int8_t = ::std::os::raw::c_schar;
-pub type __uint8_t = ::std::os::raw::c_uchar;
-pub type __int16_t = ::std::os::raw::c_short;
-pub type __uint16_t = ::std::os::raw::c_ushort;
-pub type __int32_t = ::std::os::raw::c_int;
-pub type __uint32_t = ::std::os::raw::c_uint;
-pub type __int64_t = ::std::os::raw::c_long;
-pub type __uint64_t = ::std::os::raw::c_ulong;
-pub type __int_least8_t = __int8_t;
-pub type __uint_least8_t = __uint8_t;
-pub type __int_least16_t = __int16_t;
-pub type __uint_least16_t = __uint16_t;
-pub type __int_least32_t = __int32_t;
-pub type __uint_least32_t = __uint32_t;
-pub type __int_least64_t = __int64_t;
-pub type __uint_least64_t = __uint64_t;
-pub type __quad_t = ::std::os::raw::c_long;
-pub type __u_quad_t = ::std::os::raw::c_ulong;
-pub type __intmax_t = ::std::os::raw::c_long;
-pub type __uintmax_t = ::std::os::raw::c_ulong;
-pub type __dev_t = ::std::os::raw::c_ulong;
-pub type __uid_t = ::std::os::raw::c_uint;
-pub type __gid_t = ::std::os::raw::c_uint;
-pub type __ino_t = ::std::os::raw::c_ulong;
-pub type __ino64_t = ::std::os::raw::c_ulong;
-pub type __mode_t = ::std::os::raw::c_uint;
-pub type __nlink_t = ::std::os::raw::c_ulong;
-pub type __off_t = ::std::os::raw::c_long;
-pub type __off64_t = ::std::os::raw::c_long;
-pub type __pid_t = ::std::os::raw::c_int;
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct __fsid_t {
-    pub __val: [::std::os::raw::c_int; 2usize],
-}
-#[test]
-fn bindgen_test_layout___fsid_t() {
-    assert_eq!(
-        ::std::mem::size_of::<__fsid_t>(),
-        8usize,
-        concat!("Size of: ", stringify!(__fsid_t))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<__fsid_t>(),
-        4usize,
-        concat!("Alignment of ", stringify!(__fsid_t))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__fsid_t),
-            "::",
-            stringify!(__val)
-        )
-    );
-}
-pub type __clock_t = ::std::os::raw::c_long;
-pub type __rlim_t = ::std::os::raw::c_ulong;
-pub type __rlim64_t = ::std::os::raw::c_ulong;
-pub type __id_t = ::std::os::raw::c_uint;
-pub type __time_t = ::std::os::raw::c_long;
-pub type __useconds_t = ::std::os::raw::c_uint;
-pub type __suseconds_t = ::std::os::raw::c_long;
-pub type __daddr_t = ::std::os::raw::c_int;
-pub type __key_t = ::std::os::raw::c_int;
-pub type __clockid_t = ::std::os::raw::c_int;
-pub type __timer_t = *mut ::std::os::raw::c_void;
-pub type __blksize_t = ::std::os::raw::c_long;
-pub type __blkcnt_t = ::std::os::raw::c_long;
-pub type __blkcnt64_t = ::std::os::raw::c_long;
-pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
-pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
-pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
-pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
-pub type __fsword_t = ::std::os::raw::c_long;
-pub type __ssize_t = ::std::os::raw::c_long;
-pub type __syscall_slong_t = ::std::os::raw::c_long;
-pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
-pub type __loff_t = __off64_t;
-pub type __caddr_t = *mut ::std::os::raw::c_char;
-pub type __intptr_t = ::std::os::raw::c_long;
-pub type __socklen_t = ::std::os::raw::c_uint;
-pub type __sig_atomic_t = ::std::os::raw::c_int;
-pub type int_least8_t = __int_least8_t;
-pub type int_least16_t = __int_least16_t;
-pub type int_least32_t = __int_least32_t;
-pub type int_least64_t = __int_least64_t;
-pub type uint_least8_t = __uint_least8_t;
-pub type uint_least16_t = __uint_least16_t;
-pub type uint_least32_t = __uint_least32_t;
-pub type uint_least64_t = __uint_least64_t;
-pub type int_fast8_t = ::std::os::raw::c_schar;
-pub type int_fast16_t = ::std::os::raw::c_long;
-pub type int_fast32_t = ::std::os::raw::c_long;
-pub type int_fast64_t = ::std::os::raw::c_long;
-pub type uint_fast8_t = ::std::os::raw::c_uchar;
-pub type uint_fast16_t = ::std::os::raw::c_ulong;
-pub type uint_fast32_t = ::std::os::raw::c_ulong;
-pub type uint_fast64_t = ::std::os::raw::c_ulong;
-pub type intmax_t = __intmax_t;
-pub type uintmax_t = __uintmax_t;
-pub type chtype = ::std::os::raw::c_uint;
-pub type mmask_t = ::std::os::raw::c_uint;
-pub type size_t = ::std::os::raw::c_ulong;
-pub type va_list = __builtin_va_list;
-pub type __gnuc_va_list = __builtin_va_list;
-#[repr(C)]
-#[derive(Copy, Clone)]
-pub struct __mbstate_t {
-    pub __count: ::std::os::raw::c_int,
-    pub __value: __mbstate_t__bindgen_ty_1,
-}
-#[repr(C)]
-#[derive(Copy, Clone)]
-pub union __mbstate_t__bindgen_ty_1 {
-    pub __wch: ::std::os::raw::c_uint,
-    pub __wchb: [::std::os::raw::c_char; 4usize],
-    _bindgen_union_align: u32,
-}
-#[test]
-fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
-    assert_eq!(
-        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
-        4usize,
-        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
-        4usize,
-        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__mbstate_t__bindgen_ty_1),
-            "::",
-            stringify!(__wch)
-        )
-    );
-    assert_eq!(
-        unsafe {
-            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
-        },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__mbstate_t__bindgen_ty_1),
-            "::",
-            stringify!(__wchb)
-        )
-    );
-}
-#[test]
-fn bindgen_test_layout___mbstate_t() {
-    assert_eq!(
-        ::std::mem::size_of::<__mbstate_t>(),
-        8usize,
-        concat!("Size of: ", stringify!(__mbstate_t))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<__mbstate_t>(),
-        4usize,
-        concat!("Alignment of ", stringify!(__mbstate_t))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__mbstate_t),
-            "::",
-            stringify!(__count)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
-        4usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__mbstate_t),
-            "::",
-            stringify!(__value)
-        )
-    );
-}
-#[repr(C)]
-#[derive(Copy, Clone)]
-pub struct _G_fpos_t {
-    pub __pos: __off_t,
-    pub __state: __mbstate_t,
-}
-#[test]
-fn bindgen_test_layout__G_fpos_t() {
-    assert_eq!(
-        ::std::mem::size_of::<_G_fpos_t>(),
-        16usize,
-        concat!("Size of: ", stringify!(_G_fpos_t))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<_G_fpos_t>(),
-        8usize,
-        concat!("Alignment of ", stringify!(_G_fpos_t))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_G_fpos_t),
-            "::",
-            stringify!(__pos)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_G_fpos_t),
-            "::",
-            stringify!(__state)
-        )
-    );
-}
-pub type __fpos_t = _G_fpos_t;
-#[repr(C)]
-#[derive(Copy, Clone)]
-pub struct _G_fpos64_t {
-    pub __pos: __off64_t,
-    pub __state: __mbstate_t,
-}
-#[test]
-fn bindgen_test_layout__G_fpos64_t() {
-    assert_eq!(
-        ::std::mem::size_of::<_G_fpos64_t>(),
-        16usize,
-        concat!("Size of: ", stringify!(_G_fpos64_t))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<_G_fpos64_t>(),
-        8usize,
-        concat!("Alignment of ", stringify!(_G_fpos64_t))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_G_fpos64_t),
-            "::",
-            stringify!(__pos)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_G_fpos64_t),
-            "::",
-            stringify!(__state)
-        )
-    );
-}
-pub type __fpos64_t = _G_fpos64_t;
-pub type __FILE = _IO_FILE;
-pub type FILE = _IO_FILE;
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct _IO_marker {
-    _unused: [u8; 0],
-}
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct _IO_codecvt {
-    _unused: [u8; 0],
-}
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct _IO_wide_data {
-    _unused: [u8; 0],
-}
-pub type _IO_lock_t = ::std::os::raw::c_void;
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct _IO_FILE {
-    pub _flags: ::std::os::raw::c_int,
-    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
-    pub _IO_read_end: *mut ::std::os::raw::c_char,
-    pub _IO_read_base: *mut ::std::os::raw::c_char,
-    pub _IO_write_base: *mut ::std::os::raw::c_char,
-    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
-    pub _IO_write_end: *mut ::std::os::raw::c_char,
-    pub _IO_buf_base: *mut ::std::os::raw::c_char,
-    pub _IO_buf_end: *mut ::std::os::raw::c_char,
-    pub _IO_save_base: *mut ::std::os::raw::c_char,
-    pub _IO_backup_base: *mut ::std::os::raw::c_char,
-    pub _IO_save_end: *mut ::std::os::raw::c_char,
-    pub _markers: *mut _IO_marker,
-    pub _chain: *mut _IO_FILE,
-    pub _fileno: ::std::os::raw::c_int,
-    pub _flags2: ::std::os::raw::c_int,
-    pub _old_offset: __off_t,
-    pub _cur_column: ::std::os::raw::c_ushort,
-    pub _vtable_offset: ::std::os::raw::c_schar,
-    pub _shortbuf: [::std::os::raw::c_char; 1usize],
-    pub _lock: *mut _IO_lock_t,
-    pub _offset: __off64_t,
-    pub _codecvt: *mut _IO_codecvt,
-    pub _wide_data: *mut _IO_wide_data,
-    pub _freeres_list: *mut _IO_FILE,
-    pub _freeres_buf: *mut ::std::os::raw::c_void,
-    pub __pad5: size_t,
-    pub _mode: ::std::os::raw::c_int,
-    pub _unused2: [::std::os::raw::c_char; 20usize],
-}
-#[test]
-fn bindgen_test_layout__IO_FILE() {
-    assert_eq!(
-        ::std::mem::size_of::<_IO_FILE>(),
-        216usize,
-        concat!("Size of: ", stringify!(_IO_FILE))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<_IO_FILE>(),
-        8usize,
-        concat!("Alignment of ", stringify!(_IO_FILE))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_flags)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_read_ptr)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
-        16usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_read_end)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
-        24usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_read_base)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
-        32usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_write_base)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
-        40usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_write_ptr)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
-        48usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_write_end)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
-        56usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_buf_base)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
-        64usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_buf_end)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
-        72usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_save_base)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
-        80usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_backup_base)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
-        88usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_IO_save_end)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
-        96usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_markers)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
-        104usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_chain)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
-        112usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_fileno)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
-        116usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_flags2)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
-        120usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_old_offset)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
-        128usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_cur_column)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
-        130usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_vtable_offset)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
-        131usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_shortbuf)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
-        136usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_lock)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
-        144usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_offset)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
-        152usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_codecvt)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
-        160usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_wide_data)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
-        168usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_freeres_list)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
-        176usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_freeres_buf)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
-        184usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(__pad5)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
-        192usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_mode)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
-        196usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_IO_FILE),
-            "::",
-            stringify!(_unused2)
-        )
-    );
-}
-pub type off_t = __off_t;
-pub type ssize_t = __ssize_t;
-pub type fpos_t = __fpos_t;
-extern "C" {
-    pub static mut stdin: *mut FILE;
-}
-extern "C" {
-    pub static mut stdout: *mut FILE;
-}
-extern "C" {
-    pub static mut stderr: *mut FILE;
-}
-extern "C" {
-    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn rename(
-        __old: *const ::std::os::raw::c_char,
-        __new: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn renameat(
-        __oldfd: ::std::os::raw::c_int,
-        __old: *const ::std::os::raw::c_char,
-        __newfd: ::std::os::raw::c_int,
-        __new: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn tmpfile() -> *mut FILE;
-}
-extern "C" {
-    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
-}
-extern "C" {
-    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
-}
-extern "C" {
-    pub fn tempnam(
-        __dir: *const ::std::os::raw::c_char,
-        __pfx: *const ::std::os::raw::c_char,
-    ) -> *mut ::std::os::raw::c_char;
-}
-extern "C" {
-    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fopen(
-        __filename: *const ::std::os::raw::c_char,
-        __modes: *const ::std::os::raw::c_char,
-    ) -> *mut FILE;
-}
-extern "C" {
-    pub fn freopen(
-        __filename: *const ::std::os::raw::c_char,
-        __modes: *const ::std::os::raw::c_char,
-        __stream: *mut FILE,
-    ) -> *mut FILE;
-}
-extern "C" {
-    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
-        -> *mut FILE;
-}
-extern "C" {
-    pub fn fmemopen(
-        __s: *mut ::std::os::raw::c_void,
-        __len: size_t,
-        __modes: *const ::std::os::raw::c_char,
-    ) -> *mut FILE;
-}
-extern "C" {
-    pub fn open_memstream(
-        __bufloc: *mut *mut ::std::os::raw::c_char,
-        __sizeloc: *mut size_t,
-    ) -> *mut FILE;
-}
-extern "C" {
-    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
-}
-extern "C" {
-    pub fn setvbuf(
-        __stream: *mut FILE,
-        __buf: *mut ::std::os::raw::c_char,
-        __modes: ::std::os::raw::c_int,
-        __n: size_t,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
-}
-extern "C" {
-    pub fn setlinebuf(__stream: *mut FILE);
-}
-extern "C" {
-    pub fn fprintf(
-        __stream: *mut FILE,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn sprintf(
-        __s: *mut ::std::os::raw::c_char,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vfprintf(
-        __s: *mut FILE,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vprintf(
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vsprintf(
-        __s: *mut ::std::os::raw::c_char,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn snprintf(
-        __s: *mut ::std::os::raw::c_char,
-        __maxlen: ::std::os::raw::c_ulong,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vsnprintf(
-        __s: *mut ::std::os::raw::c_char,
-        __maxlen: ::std::os::raw::c_ulong,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vdprintf(
-        __fd: ::std::os::raw::c_int,
-        __fmt: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn dprintf(
-        __fd: ::std::os::raw::c_int,
-        __fmt: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fscanf(
-        __stream: *mut FILE,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn sscanf(
-        __s: *const ::std::os::raw::c_char,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    #[link_name = "\u{1}__isoc99_fscanf"]
-    pub fn fscanf1(
-        __stream: *mut FILE,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    #[link_name = "\u{1}__isoc99_scanf"]
-    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    #[link_name = "\u{1}__isoc99_sscanf"]
-    pub fn sscanf1(
-        __s: *const ::std::os::raw::c_char,
-        __format: *const ::std::os::raw::c_char,
-        ...
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vfscanf(
-        __s: *mut FILE,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vscanf(
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn vsscanf(
-        __s: *const ::std::os::raw::c_char,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    #[link_name = "\u{1}__isoc99_vfscanf"]
-    pub fn vfscanf1(
-        __s: *mut FILE,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    #[link_name = "\u{1}__isoc99_vscanf"]
-    pub fn vscanf1(
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    #[link_name = "\u{1}__isoc99_vsscanf"]
-    pub fn vsscanf1(
-        __s: *const ::std::os::raw::c_char,
-        __format: *const ::std::os::raw::c_char,
-        __arg: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn getchar() -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
-        -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fgets(
-        __s: *mut ::std::os::raw::c_char,
-        __n: ::std::os::raw::c_int,
-        __stream: *mut FILE,
-    ) -> *mut ::std::os::raw::c_char;
-}
-extern "C" {
-    pub fn __getdelim(
-        __lineptr: *mut *mut ::std::os::raw::c_char,
-        __n: *mut size_t,
-        __delimiter: ::std::os::raw::c_int,
-        __stream: *mut FILE,
-    ) -> __ssize_t;
-}
-extern "C" {
-    pub fn getdelim(
-        __lineptr: *mut *mut ::std::os::raw::c_char,
-        __n: *mut size_t,
-        __delimiter: ::std::os::raw::c_int,
-        __stream: *mut FILE,
-    ) -> __ssize_t;
-}
-extern "C" {
-    pub fn getline(
-        __lineptr: *mut *mut ::std::os::raw::c_char,
-        __n: *mut size_t,
-        __stream: *mut FILE,
-    ) -> __ssize_t;
-}
-extern "C" {
-    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fread(
-        __ptr: *mut ::std::os::raw::c_void,
-        __size: ::std::os::raw::c_ulong,
-        __n: ::std::os::raw::c_ulong,
-        __stream: *mut FILE,
-    ) -> ::std::os::raw::c_ulong;
-}
-extern "C" {
-    pub fn fwrite(
-        __ptr: *const ::std::os::raw::c_void,
-        __size: ::std::os::raw::c_ulong,
-        __n: ::std::os::raw::c_ulong,
-        __s: *mut FILE,
-    ) -> ::std::os::raw::c_ulong;
-}
-extern "C" {
-    pub fn fread_unlocked(
-        __ptr: *mut ::std::os::raw::c_void,
-        __size: size_t,
-        __n: size_t,
-        __stream: *mut FILE,
-    ) -> size_t;
-}
-extern "C" {
-    pub fn fwrite_unlocked(
-        __ptr: *const ::std::os::raw::c_void,
-        __size: size_t,
-        __n: size_t,
-        __stream: *mut FILE,
-    ) -> size_t;
-}
-extern "C" {
-    pub fn fseek(
-        __stream: *mut FILE,
-        __off: ::std::os::raw::c_long,
-        __whence: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
-}
-extern "C" {
-    pub fn rewind(__stream: *mut FILE);
-}
-extern "C" {
-    pub fn fseeko(
-        __stream: *mut FILE,
-        __off: __off_t,
-        __whence: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn ftello(__stream: *mut FILE) -> __off_t;
-}
-extern "C" {
-    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn clearerr(__stream: *mut FILE);
-}
-extern "C" {
-    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn clearerr_unlocked(__stream: *mut FILE);
-}
-extern "C" {
-    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn perror(__s: *const ::std::os::raw::c_char);
-}
-extern "C" {
-    pub static mut sys_nerr: ::std::os::raw::c_int;
-}
-extern "C" {
-    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
-}
-extern "C" {
-    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn popen(
-        __command: *const ::std::os::raw::c_char,
-        __modes: *const ::std::os::raw::c_char,
-    ) -> *mut FILE;
-}
-extern "C" {
-    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
-}
-extern "C" {
-    pub fn flockfile(__stream: *mut FILE);
-}
-extern "C" {
-    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn funlockfile(__stream: *mut FILE);
-}
-extern "C" {
-    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
-}
-extern "C" {
-    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
-}
-pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
+
+
+pub type chtype = c_uint;
+pub type mmask_t = c_uint;
+
+pub type NCURSES_BOOL = c_uchar;
+type __va_list_tag = *mut u8;
+
+
 extern "C" {
     pub static mut acs_map: [chtype; 0usize];
 }
+
 #[repr(C)]
 #[derive(Debug, Copy, Clone)]
 pub struct screen {
@@ -1381,13 +200,13 @@
 #[repr(C)]
 #[derive(Debug, Copy, Clone)]
 pub struct _win_st {
-    pub _cury: ::std::os::raw::c_short,
-    pub _curx: ::std::os::raw::c_short,
-    pub _maxy: ::std::os::raw::c_short,
-    pub _maxx: ::std::os::raw::c_short,
-    pub _begy: ::std::os::raw::c_short,
-    pub _begx: ::std::os::raw::c_short,
-    pub _flags: ::std::os::raw::c_short,
+    pub _cury: c_short,
+    pub _curx: c_short,
+    pub _maxy: c_short,
+    pub _maxx: c_short,
+    pub _begy: c_short,
+    pub _begx: c_short,
+    pub _flags: c_short,
     pub _attrs: attr_t,
     pub _bkgd: chtype,
     pub _notimeout: bool,
@@ -1399,440 +218,84 @@
     pub _immed: bool,
     pub _sync: bool,
     pub _use_keypad: bool,
-    pub _delay: ::std::os::raw::c_int,
+    pub _delay: c_int,
     pub _line: *mut ldat,
-    pub _regtop: ::std::os::raw::c_short,
-    pub _regbottom: ::std::os::raw::c_short,
-    pub _parx: ::std::os::raw::c_int,
-    pub _pary: ::std::os::raw::c_int,
+    pub _regtop: c_short,
+    pub _regbottom: c_short,
+    pub _parx: c_int,
+    pub _pary: c_int,
     pub _parent: *mut WINDOW,
     pub _pad: _win_st_pdat,
-    pub _yoffset: ::std::os::raw::c_short,
+    pub _yoffset: c_short,
 }
 #[repr(C)]
 #[derive(Debug, Copy, Clone)]
 pub struct _win_st_pdat {
-    pub _pad_y: ::std::os::raw::c_short,
-    pub _pad_x: ::std::os::raw::c_short,
-    pub _pad_top: ::std::os::raw::c_short,
-    pub _pad_left: ::std::os::raw::c_short,
-    pub _pad_bottom: ::std::os::raw::c_short,
-    pub _pad_right: ::std::os::raw::c_short,
-}
-#[test]
-fn bindgen_test_layout__win_st_pdat() {
-    assert_eq!(
-        ::std::mem::size_of::<_win_st_pdat>(),
-        12usize,
-        concat!("Size of: ", stringify!(_win_st_pdat))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<_win_st_pdat>(),
-        2usize,
-        concat!("Alignment of ", stringify!(_win_st_pdat))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_y as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st_pdat),
-            "::",
-            stringify!(_pad_y)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_x as *const _ as usize },
-        2usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st_pdat),
-            "::",
-            stringify!(_pad_x)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_top as *const _ as usize },
-        4usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st_pdat),
-            "::",
-            stringify!(_pad_top)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_left as *const _ as usize },
-        6usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st_pdat),
-            "::",
-            stringify!(_pad_left)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_bottom as *const _ as usize },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st_pdat),
-            "::",
-            stringify!(_pad_bottom)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st_pdat>()))._pad_right as *const _ as usize },
-        10usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st_pdat),
-            "::",
-            stringify!(_pad_right)
-        )
-    );
-}
-#[test]
-fn bindgen_test_layout__win_st() {
-    assert_eq!(
-        ::std::mem::size_of::<_win_st>(),
-        88usize,
-        concat!("Size of: ", stringify!(_win_st))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<_win_st>(),
-        8usize,
-        concat!("Alignment of ", stringify!(_win_st))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._cury as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_cury)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._curx as *const _ as usize },
-        2usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_curx)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._maxy as *const _ as usize },
-        4usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_maxy)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._maxx as *const _ as usize },
-        6usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_maxx)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._begy as *const _ as usize },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_begy)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._begx as *const _ as usize },
-        10usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_begx)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._flags as *const _ as usize },
-        12usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_flags)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._attrs as *const _ as usize },
-        16usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_attrs)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._bkgd as *const _ as usize },
-        20usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_bkgd)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._notimeout as *const _ as usize },
-        24usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_notimeout)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._clear as *const _ as usize },
-        25usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_clear)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._leaveok as *const _ as usize },
-        26usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_leaveok)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._scroll as *const _ as usize },
-        27usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_scroll)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._idlok as *const _ as usize },
-        28usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_idlok)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._idcok as *const _ as usize },
-        29usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_idcok)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._immed as *const _ as usize },
-        30usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_immed)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._sync as *const _ as usize },
-        31usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_sync)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._use_keypad as *const _ as usize },
-        32usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_use_keypad)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._delay as *const _ as usize },
-        36usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_delay)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._line as *const _ as usize },
-        40usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_line)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._regtop as *const _ as usize },
-        48usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_regtop)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._regbottom as *const _ as usize },
-        50usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_regbottom)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._parx as *const _ as usize },
-        52usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_parx)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._pary as *const _ as usize },
-        56usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_pary)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._parent as *const _ as usize },
-        64usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_parent)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._pad as *const _ as usize },
-        72usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_pad)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<_win_st>()))._yoffset as *const _ as usize },
-        84usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(_win_st),
-            "::",
-            stringify!(_yoffset)
-        )
-    );
+    pub _pad_y: c_short,
+    pub _pad_x: c_short,
+    pub _pad_top: c_short,
+    pub _pad_left: c_short,
+    pub _pad_bottom: c_short,
+    pub _pad_right: c_short,
 }
 pub type NCURSES_OUTC = ::std::option::Option<
-    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
+    unsafe extern "C" fn(arg1: c_int) -> c_int,
 >;
 extern "C" {
-    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn addch(arg1: chtype) -> c_int;
 }
 extern "C" {
-    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn addchnstr(arg1: *const chtype, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
+    pub fn addchstr(arg1: *const chtype) -> c_int;
 }
 extern "C" {
     pub fn addnstr(
-        arg1: *const ::std::os::raw::c_char,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: *const c_char,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn addstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn addstr(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn attroff(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn attron(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn attrset(arg1: c_int) -> c_int;
 }
 extern "C" {
     pub fn attr_get(
         arg1: *mut attr_t,
-        arg2: *mut ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg2: *mut c_short,
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
+    pub fn attr_off(arg1: attr_t, arg2: *mut c_void) -> c_int;
 }
 extern "C" {
-    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
+    pub fn attr_on(arg1: attr_t, arg2: *mut c_void) -> c_int;
 }
 extern "C" {
     pub fn attr_set(
         arg1: attr_t,
-        arg2: ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn baudrate() -> ::std::os::raw::c_int;
+    pub fn baudrate() -> c_int;
 }
 extern "C" {
-    pub fn beep() -> ::std::os::raw::c_int;
+    pub fn beep() -> c_int;
 }
 extern "C" {
-    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn bkgd(arg1: chtype) -> c_int;
 }
 extern "C" {
     pub fn bkgdset(arg1: chtype);
@@ -1847,151 +310,151 @@
         arg6: chtype,
         arg7: chtype,
         arg8: chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     #[link_name = "\u{1}box"]
-    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> ::std::os::raw::c_int;
+    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> c_int;
 }
 extern "C" {
     pub fn can_change_color() -> bool;
 }
 extern "C" {
-    pub fn cbreak() -> ::std::os::raw::c_int;
+    pub fn cbreak() -> c_int;
 }
 extern "C" {
     pub fn chgat(
-        arg1: ::std::os::raw::c_int,
+        arg1: c_int,
         arg2: attr_t,
-        arg3: ::std::os::raw::c_short,
-        arg4: *const ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_short,
+        arg4: *const c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn clear() -> ::std::os::raw::c_int;
+    pub fn clear() -> c_int;
 }
 extern "C" {
-    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
-    pub fn clrtobot() -> ::std::os::raw::c_int;
+    pub fn clrtobot() -> c_int;
 }
 extern "C" {
-    pub fn clrtoeol() -> ::std::os::raw::c_int;
+    pub fn clrtoeol() -> c_int;
 }
 extern "C" {
     pub fn color_content(
-        arg1: ::std::os::raw::c_short,
-        arg2: *mut ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_short,
-        arg4: *mut ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_short,
+        arg2: *mut c_short,
+        arg3: *mut c_short,
+        arg4: *mut c_short,
+    ) -> c_int;
 }
 extern "C" {
     pub fn color_set(
-        arg1: ::std::os::raw::c_short,
-        arg2: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_short,
+        arg2: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn COLOR_PAIR(arg1: c_int) -> c_int;
 }
 extern "C" {
     pub fn copywin(
         arg1: *const WINDOW,
         arg2: *mut WINDOW,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
-        arg6: ::std::os::raw::c_int,
-        arg7: ::std::os::raw::c_int,
-        arg8: ::std::os::raw::c_int,
-        arg9: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
+        arg6: c_int,
+        arg7: c_int,
+        arg8: c_int,
+        arg9: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn curs_set(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn def_prog_mode() -> ::std::os::raw::c_int;
+    pub fn def_prog_mode() -> c_int;
 }
 extern "C" {
-    pub fn def_shell_mode() -> ::std::os::raw::c_int;
+    pub fn def_shell_mode() -> c_int;
 }
 extern "C" {
-    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn delay_output(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn delch() -> ::std::os::raw::c_int;
+    pub fn delch() -> c_int;
 }
 extern "C" {
     pub fn delscreen(arg1: *mut SCREEN);
 }
 extern "C" {
-    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn delwin(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn deleteln() -> ::std::os::raw::c_int;
+    pub fn deleteln() -> c_int;
 }
 extern "C" {
     pub fn derwin(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
     ) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn doupdate() -> ::std::os::raw::c_int;
+    pub fn doupdate() -> c_int;
 }
 extern "C" {
     pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn echo() -> ::std::os::raw::c_int;
+    pub fn echo() -> c_int;
 }
 extern "C" {
-    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn echochar(arg1: chtype) -> c_int;
 }
 extern "C" {
-    pub fn erase() -> ::std::os::raw::c_int;
+    pub fn erase() -> c_int;
 }
 extern "C" {
-    pub fn endwin() -> ::std::os::raw::c_int;
+    pub fn endwin() -> c_int;
 }
 extern "C" {
-    pub fn erasechar() -> ::std::os::raw::c_char;
+    pub fn erasechar() -> c_char;
 }
 extern "C" {
     pub fn filter();
 }
 extern "C" {
-    pub fn flash() -> ::std::os::raw::c_int;
+    pub fn flash() -> c_int;
 }
 extern "C" {
-    pub fn flushinp() -> ::std::os::raw::c_int;
+    pub fn flushinp() -> c_int;
 }
 extern "C" {
     pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
 }
 extern "C" {
-    pub fn getch() -> ::std::os::raw::c_int;
+    pub fn getch() -> c_int;
 }
 extern "C" {
     pub fn getnstr(
-        arg1: *mut ::std::os::raw::c_char,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: *mut c_char,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn getstr(arg1: *mut c_char) -> c_int;
 }
 extern "C" {
     pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn halfdelay(arg1: c_int) -> c_int;
 }
 extern "C" {
     pub fn has_colors() -> bool;
@@ -2003,13 +466,13 @@
     pub fn has_il() -> bool;
 }
 extern "C" {
-    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn hline(arg1: chtype, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn idcok(arg1: *mut WINDOW, arg2: bool);
 }
 extern "C" {
-    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
     pub fn immedok(arg1: *mut WINDOW, arg2: bool);
@@ -2018,634 +481,634 @@
     pub fn inch() -> chtype;
 }
 extern "C" {
-    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn inchnstr(arg1: *mut chtype, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
+    pub fn inchstr(arg1: *mut chtype) -> c_int;
 }
 extern "C" {
     pub fn initscr() -> *mut WINDOW;
 }
 extern "C" {
     pub fn init_color(
-        arg1: ::std::os::raw::c_short,
-        arg2: ::std::os::raw::c_short,
-        arg3: ::std::os::raw::c_short,
-        arg4: ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_short,
+        arg2: c_short,
+        arg3: c_short,
+        arg4: c_short,
+    ) -> c_int;
 }
 extern "C" {
     pub fn init_pair(
-        arg1: ::std::os::raw::c_short,
-        arg2: ::std::os::raw::c_short,
-        arg3: ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_short,
+        arg2: c_short,
+        arg3: c_short,
+    ) -> c_int;
 }
 extern "C" {
     pub fn innstr(
-        arg1: *mut ::std::os::raw::c_char,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: *mut c_char,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn insch(arg1: chtype) -> c_int;
 }
 extern "C" {
-    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn insdelln(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn insertln() -> ::std::os::raw::c_int;
+    pub fn insertln() -> c_int;
 }
 extern "C" {
     pub fn insnstr(
-        arg1: *const ::std::os::raw::c_char,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: *const c_char,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn insstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn insstr(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn instr(arg1: *mut c_char) -> c_int;
 }
 extern "C" {
-    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
     pub fn isendwin() -> bool;
 }
 extern "C" {
-    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> bool;
+    pub fn is_linetouched(arg1: *mut WINDOW, arg2: c_int) -> bool;
 }
 extern "C" {
     pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
 }
 extern "C" {
-    pub fn keyname(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
+    pub fn keyname(arg1: c_int) -> *const c_char;
 }
 extern "C" {
-    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
-    pub fn killchar() -> ::std::os::raw::c_char;
+    pub fn killchar() -> c_char;
 }
 extern "C" {
-    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
-    pub fn longname() -> *mut ::std::os::raw::c_char;
+    pub fn longname() -> *mut c_char;
 }
 extern "C" {
-    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
     #[link_name = "\u{1}move"]
-    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
-        -> ::std::os::raw::c_int;
+    pub fn move_(arg1: c_int, arg2: c_int)
+        -> c_int;
 }
 extern "C" {
     pub fn mvaddch(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvaddchnstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: *const chtype,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvaddchstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: *const chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvaddnstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *const c_char,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvaddstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvchgat(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: attr_t,
-        arg5: ::std::os::raw::c_short,
-        arg6: *const ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg5: c_short,
+        arg6: *const c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvcur(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvdelch(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvderwin(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvgetch(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvgetnstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_char,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *mut c_char,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvgetstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *mut c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvhline(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: chtype,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> chtype;
+    pub fn mvinch(arg1: c_int, arg2: c_int) -> chtype;
 }
 extern "C" {
     pub fn mvinchnstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: *mut chtype,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvinchstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: *mut chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvinnstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_char,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *mut c_char,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvinsch(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvinsnstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *const c_char,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvinsstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvinstr(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *mut c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvprintw(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *const c_char,
         ...
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvscanw(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
+        arg1: c_int,
+        arg2: c_int,
+        arg3: *const c_char,
         ...
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvvline(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
         arg3: chtype,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwaddch(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwaddchnstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: *const chtype,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwaddchstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: *const chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwaddnstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *const ::std::os::raw::c_char,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *const c_char,
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwaddstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwchgat(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
         arg5: attr_t,
-        arg6: ::std::os::raw::c_short,
-        arg7: *const ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg6: c_short,
+        arg7: *const c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwdelch(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwgetch(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwgetnstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_char,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *mut c_char,
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwgetstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *mut c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwhline(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: chtype,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwin(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinch(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
     ) -> chtype;
 }
 extern "C" {
     pub fn mvwinchnstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: *mut chtype,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinchstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: *mut chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinnstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_char,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *mut c_char,
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinsch(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinsnstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *const ::std::os::raw::c_char,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *const c_char,
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinsstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwinstr(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *mut c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwprintw(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *const ::std::os::raw::c_char,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *const c_char,
         ...
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwscanw(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: *const ::std::os::raw::c_char,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: *const c_char,
         ...
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn mvwvline(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
         arg4: chtype,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn napms(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut WINDOW;
+    pub fn newpad(arg1: c_int, arg2: c_int) -> *mut WINDOW;
 }
 extern "C" {
     pub fn newterm(
-        arg1: *const ::std::os::raw::c_char,
+        arg1: *const c_char,
         arg2: *mut FILE,
         arg3: *mut FILE,
     ) -> *mut SCREEN;
 }
 extern "C" {
     pub fn newwin(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
+        arg1: c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
     ) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn nl() -> ::std::os::raw::c_int;
+    pub fn nl() -> c_int;
 }
 extern "C" {
-    pub fn nocbreak() -> ::std::os::raw::c_int;
+    pub fn nocbreak() -> c_int;
 }
 extern "C" {
-    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
-    pub fn noecho() -> ::std::os::raw::c_int;
+    pub fn noecho() -> c_int;
 }
 extern "C" {
-    pub fn nonl() -> ::std::os::raw::c_int;
+    pub fn nonl() -> c_int;
 }
 extern "C" {
     pub fn noqiflush();
 }
 extern "C" {
-    pub fn noraw() -> ::std::os::raw::c_int;
+    pub fn noraw() -> c_int;
 }
 extern "C" {
-    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
-    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn pair_content(
-        arg1: ::std::os::raw::c_short,
-        arg2: *mut ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_short,
+        arg2: *mut c_short,
+        arg3: *mut c_short,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn PAIR_NUMBER(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> c_int;
 }
 extern "C" {
     pub fn pnoutrefresh(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
-        arg6: ::std::os::raw::c_int,
-        arg7: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
+        arg6: c_int,
+        arg7: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn prefresh(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
-        arg6: ::std::os::raw::c_int,
-        arg7: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
+        arg6: c_int,
+        arg7: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn printw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
+    pub fn printw(arg1: *const c_char, ...) -> c_int;
 }
 extern "C" {
-    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> ::std::os::raw::c_int;
+    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> c_int;
 }
 extern "C" {
     pub fn qiflush();
 }
 extern "C" {
-    pub fn raw() -> ::std::os::raw::c_int;
+    pub fn raw() -> c_int;
 }
 extern "C" {
-    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn redrawwin(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn refresh() -> ::std::os::raw::c_int;
+    pub fn refresh() -> c_int;
 }
 extern "C" {
-    pub fn resetty() -> ::std::os::raw::c_int;
+    pub fn resetty() -> c_int;
 }
 extern "C" {
-    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
+    pub fn reset_prog_mode() -> c_int;
 }
 extern "C" {
-    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
+    pub fn reset_shell_mode() -> c_int;
 }
 extern "C" {
     pub fn ripoffline(
-        arg1: ::std::os::raw::c_int,
+        arg1: c_int,
         arg2: ::std::option::Option<
             unsafe extern "C" fn(
                 arg1: *mut WINDOW,
-                arg2: ::std::os::raw::c_int,
-            ) -> ::std::os::raw::c_int,
+                arg2: c_int,
+            ) -> c_int,
         >,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
-    pub fn savetty() -> ::std::os::raw::c_int;
+    pub fn savetty() -> c_int;
 }
 extern "C" {
-    pub fn scanw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
+    pub fn scanw(arg1: *const c_char, ...) -> c_int;
 }
 extern "C" {
-    pub fn scr_dump(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn scr_dump(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn scr_init(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn scr_init(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn scrl(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn scroll(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
-    pub fn scr_restore(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn scr_restore(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn scr_set(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn scr_set(arg1: *const c_char) -> c_int;
 }
 extern "C" {
     pub fn setscrreg(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
 }
 extern "C" {
-    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn slk_attroff(arg1: chtype) -> c_int;
 }
 extern "C" {
-    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
+    pub fn slk_attr_off(arg1: attr_t, arg2: *mut c_void) -> c_int;
 }
 extern "C" {
-    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn slk_attron(arg1: chtype) -> c_int;
 }
 extern "C" {
-    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
+    pub fn slk_attr_on(arg1: attr_t, arg2: *mut c_void) -> c_int;
 }
 extern "C" {
-    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn slk_attrset(arg1: chtype) -> c_int;
 }
 extern "C" {
     pub fn slk_attr() -> attr_t;
@@ -2653,98 +1116,98 @@
 extern "C" {
     pub fn slk_attr_set(
         arg1: attr_t,
-        arg2: ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn slk_clear() -> ::std::os::raw::c_int;
+    pub fn slk_clear() -> c_int;
 }
 extern "C" {
-    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
+    pub fn slk_color(arg1: c_short) -> c_int;
 }
 extern "C" {
-    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn slk_init(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn slk_label(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
+    pub fn slk_label(arg1: c_int) -> *mut c_char;
 }
 extern "C" {
-    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
+    pub fn slk_noutrefresh() -> c_int;
 }
 extern "C" {
-    pub fn slk_refresh() -> ::std::os::raw::c_int;
+    pub fn slk_refresh() -> c_int;
 }
 extern "C" {
-    pub fn slk_restore() -> ::std::os::raw::c_int;
+    pub fn slk_restore() -> c_int;
 }
 extern "C" {
     pub fn slk_set(
-        arg1: ::std::os::raw::c_int,
-        arg2: *const ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: *const c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn slk_touch() -> ::std::os::raw::c_int;
+    pub fn slk_touch() -> c_int;
 }
 extern "C" {
-    pub fn standout() -> ::std::os::raw::c_int;
+    pub fn standout() -> c_int;
 }
 extern "C" {
-    pub fn standend() -> ::std::os::raw::c_int;
+    pub fn standend() -> c_int;
 }
 extern "C" {
-    pub fn start_color() -> ::std::os::raw::c_int;
+    pub fn start_color() -> c_int;
 }
 extern "C" {
     pub fn subpad(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
     ) -> *mut WINDOW;
 }
 extern "C" {
     pub fn subwin(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
     ) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> c_int;
 }
 extern "C" {
     pub fn termattrs() -> chtype;
 }
 extern "C" {
-    pub fn termname() -> *mut ::std::os::raw::c_char;
+    pub fn termname() -> *mut c_char;
 }
 extern "C" {
-    pub fn timeout(arg1: ::std::os::raw::c_int);
+    pub fn timeout(arg1: c_int);
 }
 extern "C" {
     pub fn touchline(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn touchwin(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn typeahead(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn ungetch(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn untouchwin(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn use_env(arg1: bool);
@@ -2753,107 +1216,107 @@
     pub fn use_tioctl(arg1: bool);
 }
 extern "C" {
-    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
+    pub fn vidattr(arg1: chtype) -> c_int;
 }
 extern "C" {
-    pub fn vidputs(arg1: chtype, arg2: NCURSES_OUTC) -> ::std::os::raw::c_int;
+    pub fn vidputs(arg1: chtype, arg2: NCURSES_OUTC) -> c_int;
 }
 extern "C" {
-    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn vline(arg1: chtype, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn vwprintw(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         arg3: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn vw_printw(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         arg3: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn vwscanw(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         arg3: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn vw_scanw(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         arg3: *mut __va_list_tag,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
-    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> c_int;
 }
 extern "C" {
     pub fn waddchnstr(
         arg1: *mut WINDOW,
         arg2: *const chtype,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> ::std::os::raw::c_int;
+    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> c_int;
 }
 extern "C" {
     pub fn waddnstr(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
-        -> ::std::os::raw::c_int;
+    pub fn waddstr(arg1: *mut WINDOW, arg2: *const c_char)
+        -> c_int;
 }
 extern "C" {
-    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn wattron(arg1: *mut WINDOW, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn wattroff(arg1: *mut WINDOW, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn wattrset(arg1: *mut WINDOW, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn wattr_get(
         arg1: *mut WINDOW,
         arg2: *mut attr_t,
-        arg3: *mut ::std::os::raw::c_short,
-        arg4: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: *mut c_short,
+        arg4: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn wattr_on(
         arg1: *mut WINDOW,
         arg2: attr_t,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn wattr_off(
         arg1: *mut WINDOW,
         arg2: attr_t,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn wattr_set(
         arg1: *mut WINDOW,
         arg2: attr_t,
-        arg3: ::std::os::raw::c_short,
-        arg4: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_short,
+        arg4: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> c_int;
 }
 extern "C" {
     pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
@@ -2869,67 +1332,67 @@
         arg7: chtype,
         arg8: chtype,
         arg9: chtype,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn wchgat(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
+        arg2: c_int,
         arg3: attr_t,
-        arg4: ::std::os::raw::c_short,
-        arg5: *const ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg4: c_short,
+        arg5: *const c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wclear(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wclrtobot(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wclrtoeol(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn wcolor_set(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn wcursyncup(arg1: *mut WINDOW);
 }
 extern "C" {
-    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wdelch(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wdeleteln(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> c_int;
 }
 extern "C" {
-    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn werase(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wgetch(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn wgetnstr(
         arg1: *mut WINDOW,
-        arg2: *mut ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *mut c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut c_char) -> c_int;
 }
 extern "C" {
     pub fn whline(
         arg1: *mut WINDOW,
         arg2: chtype,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn winch(arg1: *mut WINDOW) -> chtype;
@@ -2938,91 +1401,91 @@
     pub fn winchnstr(
         arg1: *mut WINDOW,
         arg2: *mut chtype,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> ::std::os::raw::c_int;
+    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> c_int;
 }
 extern "C" {
     pub fn winnstr(
         arg1: *mut WINDOW,
-        arg2: *mut ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *mut c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> c_int;
 }
 extern "C" {
-    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn winsdelln(arg1: *mut WINDOW, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn winsertln(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn winsnstr(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
-        -> ::std::os::raw::c_int;
+    pub fn winsstr(arg1: *mut WINDOW, arg2: *const c_char)
+        -> c_int;
 }
 extern "C" {
-    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn winstr(arg1: *mut WINDOW, arg2: *mut c_char) -> c_int;
 }
 extern "C" {
     pub fn wmove(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wnoutrefresh(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn wprintw(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         ...
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn wredrawln(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wrefresh(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn wscanw(
         arg1: *mut WINDOW,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         ...
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn wscrl(arg1: *mut WINDOW, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn wsetscrreg(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wstandout(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
+    pub fn wstandend(arg1: *mut WINDOW) -> c_int;
 }
 extern "C" {
     pub fn wsyncdown(arg1: *mut WINDOW);
@@ -3031,211 +1494,211 @@
     pub fn wsyncup(arg1: *mut WINDOW);
 }
 extern "C" {
-    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
+    pub fn wtimeout(arg1: *mut WINDOW, arg2: c_int);
 }
 extern "C" {
     pub fn wtouchln(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn wvline(
         arg1: *mut WINDOW,
         arg2: chtype,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn tigetflag(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn tigetflag(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn tigetnum(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn tigetnum(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn tigetstr(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
+    pub fn tigetstr(arg1: *const c_char) -> *mut c_char;
 }
 extern "C" {
-    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn putp(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn tparm(arg1: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
+    pub fn tparm(arg1: *const c_char, ...) -> *mut c_char;
 }
 extern "C" {
-    pub fn tiparm(arg1: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
+    pub fn tiparm(arg1: *const c_char, ...) -> *mut c_char;
 }
 extern "C" {
-    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getattrs(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getcurx(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getcury(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getbegx(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getbegy(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getmaxx(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getmaxy(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getparx(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
-    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn getpary(arg1: *const WINDOW) -> c_int;
 }
 pub type NCURSES_WINDOW_CB = ::std::option::Option<
     unsafe extern "C" fn(
         arg1: *mut WINDOW,
-        arg2: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int,
+        arg2: *mut c_void,
+    ) -> c_int,
 >;
 pub type NCURSES_SCREEN_CB = ::std::option::Option<
     unsafe extern "C" fn(
         arg1: *mut SCREEN,
-        arg2: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int,
+        arg2: *mut c_void,
+    ) -> c_int,
 >;
 extern "C" {
-    pub fn is_term_resized(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> bool;
+    pub fn is_term_resized(arg1: c_int, arg2: c_int) -> bool;
 }
 extern "C" {
     pub fn keybound(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> *mut ::std::os::raw::c_char;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> *mut c_char;
 }
 extern "C" {
-    pub fn curses_version() -> *const ::std::os::raw::c_char;
+    pub fn curses_version() -> *const c_char;
 }
 extern "C" {
     pub fn alloc_pair(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn assume_default_colors(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn define_key(
-        arg1: *const ::std::os::raw::c_char,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: *const c_char,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn extended_color_content(
-        arg1: ::std::os::raw::c_int,
-        arg2: *mut ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: *mut c_int,
+        arg3: *mut c_int,
+        arg4: *mut c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn extended_pair_content(
-        arg1: ::std::os::raw::c_int,
-        arg2: *mut ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: *mut c_int,
+        arg3: *mut c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn extended_slk_color(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn extended_slk_color(arg1: c_int) -> c_int;
 }
 extern "C" {
     pub fn find_pair(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn free_pair(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn free_pair(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn get_escdelay() -> ::std::os::raw::c_int;
+    pub fn get_escdelay() -> c_int;
 }
 extern "C" {
     pub fn init_extended_color(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn init_extended_pair(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn key_defined(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
+    pub fn key_defined(arg1: *const c_char) -> c_int;
 }
 extern "C" {
-    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool) -> ::std::os::raw::c_int;
+    pub fn keyok(arg1: c_int, arg2: bool) -> c_int;
 }
 extern "C" {
     pub fn reset_color_pairs();
 }
 extern "C" {
     pub fn resize_term(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn resizeterm(
-        arg1: ::std::os::raw::c_int,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: c_int,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn set_escdelay(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn set_tabsize(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn use_default_colors() -> ::std::os::raw::c_int;
+    pub fn use_default_colors() -> c_int;
 }
 extern "C" {
-    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
+    pub fn use_extended_names(arg1: bool) -> c_int;
 }
 extern "C" {
-    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn use_legacy_coding(arg1: c_int) -> c_int;
 }
 extern "C" {
     pub fn use_screen(
         arg1: *mut SCREEN,
         arg2: NCURSES_SCREEN_CB,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn use_window(
         arg1: *mut WINDOW,
         arg2: NCURSES_WINDOW_CB,
-        arg3: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
     pub fn wresize(
         arg1: *mut WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn nofilter();
@@ -3280,81 +1743,81 @@
     pub fn is_syncok(arg1: *const WINDOW) -> bool;
 }
 extern "C" {
-    pub fn wgetdelay(arg1: *const WINDOW) -> ::std::os::raw::c_int;
+    pub fn wgetdelay(arg1: *const WINDOW) -> c_int;
 }
 extern "C" {
     pub fn wgetscrreg(
         arg1: *const WINDOW,
-        arg2: *mut ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *mut c_int,
+        arg3: *mut c_int,
+    ) -> c_int;
 }
 pub type NCURSES_OUTC_sp = ::std::option::Option<
-    unsafe extern "C" fn(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
+    unsafe extern "C" fn(arg1: *mut SCREEN, arg2: c_int) -> c_int,
 >;
 extern "C" {
     pub fn new_prescr() -> *mut SCREEN;
 }
 extern "C" {
-    pub fn baudrate_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn baudrate_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn beep_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn beep_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn can_change_color_sp(arg1: *mut SCREEN) -> bool;
 }
 extern "C" {
-    pub fn cbreak_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn cbreak_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn curs_set_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn curs_set_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn color_content_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_short,
-        arg4: *mut ::std::os::raw::c_short,
-        arg5: *mut ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: *mut c_short,
+        arg4: *mut c_short,
+        arg5: *mut c_short,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn def_prog_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn def_prog_mode_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn def_shell_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn def_shell_mode_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn delay_output_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
-        -> ::std::os::raw::c_int;
+    pub fn delay_output_sp(arg1: *mut SCREEN, arg2: c_int)
+        -> c_int;
 }
 extern "C" {
-    pub fn doupdate_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn doupdate_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn echo_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn echo_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn endwin_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn endwin_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn erasechar_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_char;
+    pub fn erasechar_sp(arg1: *mut SCREEN) -> c_char;
 }
 extern "C" {
     pub fn filter_sp(arg1: *mut SCREEN);
 }
 extern "C" {
-    pub fn flash_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn flash_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn flushinp_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn flushinp_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn getwin_sp(arg1: *mut SCREEN, arg2: *mut FILE) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn halfdelay_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn halfdelay_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn has_colors_sp(arg1: *mut SCREEN) -> bool;
@@ -3368,22 +1831,22 @@
 extern "C" {
     pub fn init_color_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_short,
-        arg3: ::std::os::raw::c_short,
-        arg4: ::std::os::raw::c_short,
-        arg5: ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: c_short,
+        arg4: c_short,
+        arg5: c_short,
+    ) -> c_int;
 }
 extern "C" {
     pub fn init_pair_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_short,
-        arg3: ::std::os::raw::c_short,
-        arg4: ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: c_short,
+        arg4: c_short,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn intrflush_sp(arg1: *mut SCREEN, arg2: *mut WINDOW, arg3: bool) -> ::std::os::raw::c_int;
+    pub fn intrflush_sp(arg1: *mut SCREEN, arg2: *mut WINDOW, arg3: bool) -> c_int;
 }
 extern "C" {
     pub fn isendwin_sp(arg1: *mut SCREEN) -> bool;
@@ -3391,38 +1854,38 @@
 extern "C" {
     pub fn keyname_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-    ) -> *const ::std::os::raw::c_char;
+        arg2: c_int,
+    ) -> *const c_char;
 }
 extern "C" {
-    pub fn killchar_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_char;
+    pub fn killchar_sp(arg1: *mut SCREEN) -> c_char;
 }
 extern "C" {
-    pub fn longname_sp(arg1: *mut SCREEN) -> *mut ::std::os::raw::c_char;
+    pub fn longname_sp(arg1: *mut SCREEN) -> *mut c_char;
 }
 extern "C" {
     pub fn mvcur_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn napms_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn napms_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn newpad_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
     ) -> *mut WINDOW;
 }
 extern "C" {
     pub fn newterm_sp(
         arg1: *mut SCREEN,
-        arg2: *const ::std::os::raw::c_char,
+        arg2: *const c_char,
         arg3: *mut FILE,
         arg4: *mut FILE,
     ) -> *mut SCREEN;
@@ -3430,94 +1893,94 @@
 extern "C" {
     pub fn newwin_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
     ) -> *mut WINDOW;
 }
 extern "C" {
-    pub fn nl_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn nl_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn nocbreak_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn nocbreak_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn noecho_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn noecho_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn nonl_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn nonl_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn noqiflush_sp(arg1: *mut SCREEN);
 }
 extern "C" {
-    pub fn noraw_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn noraw_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn pair_content_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_short,
-        arg3: *mut ::std::os::raw::c_short,
-        arg4: *mut ::std::os::raw::c_short,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_short,
+        arg3: *mut c_short,
+        arg4: *mut c_short,
+    ) -> c_int;
 }
 extern "C" {
     pub fn qiflush_sp(arg1: *mut SCREEN);
 }
 extern "C" {
-    pub fn raw_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn raw_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn reset_prog_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn reset_prog_mode_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn reset_shell_mode_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn reset_shell_mode_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn resetty_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn resetty_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn ripoffline_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
+        arg2: c_int,
         arg3: ::std::option::Option<
             unsafe extern "C" fn(
                 arg1: *mut WINDOW,
-                arg2: ::std::os::raw::c_int,
-            ) -> ::std::os::raw::c_int,
+                arg2: c_int,
+            ) -> c_int,
         >,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
-    pub fn savetty_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn savetty_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn scr_init_sp(
         arg1: *mut SCREEN,
-        arg2: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn scr_restore_sp(
         arg1: *mut SCREEN,
-        arg2: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn scr_set_sp(
         arg1: *mut SCREEN,
-        arg2: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn slk_attroff_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn slk_attroff_sp(arg1: *mut SCREEN, arg2: chtype) -> c_int;
 }
 extern "C" {
-    pub fn slk_attron_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn slk_attron_sp(arg1: *mut SCREEN, arg2: chtype) -> c_int;
 }
 extern "C" {
-    pub fn slk_attrset_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn slk_attrset_sp(arg1: *mut SCREEN, arg2: chtype) -> c_int;
 }
 extern "C" {
     pub fn slk_attr_sp(arg1: *mut SCREEN) -> attr_t;
@@ -3526,59 +1989,59 @@
     pub fn slk_attr_set_sp(
         arg1: *mut SCREEN,
         arg2: attr_t,
-        arg3: ::std::os::raw::c_short,
-        arg4: *mut ::std::os::raw::c_void,
-    ) -> ::std::os::raw::c_int;
+        arg3: c_short,
+        arg4: *mut c_void,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn slk_clear_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn slk_clear_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn slk_color_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
+    pub fn slk_color_sp(arg1: *mut SCREEN, arg2: c_short) -> c_int;
 }
 extern "C" {
-    pub fn slk_init_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn slk_init_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn slk_label_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-    ) -> *mut ::std::os::raw::c_char;
+        arg2: c_int,
+    ) -> *mut c_char;
 }
 extern "C" {
-    pub fn slk_noutrefresh_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn slk_noutrefresh_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn slk_refresh_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn slk_refresh_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn slk_restore_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn slk_restore_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn slk_set_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: *const ::std::os::raw::c_char,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: *const c_char,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn slk_touch_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn slk_touch_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
-    pub fn start_color_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn start_color_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn termattrs_sp(arg1: *mut SCREEN) -> chtype;
 }
 extern "C" {
-    pub fn termname_sp(arg1: *mut SCREEN) -> *mut ::std::os::raw::c_char;
+    pub fn termname_sp(arg1: *mut SCREEN) -> *mut c_char;
 }
 extern "C" {
-    pub fn typeahead_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn typeahead_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn ungetch_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn ungetch_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn use_env_sp(arg1: *mut SCREEN, arg2: bool);
@@ -3587,115 +2050,115 @@
     pub fn use_tioctl_sp(arg1: *mut SCREEN, arg2: bool);
 }
 extern "C" {
-    pub fn vidattr_sp(arg1: *mut SCREEN, arg2: chtype) -> ::std::os::raw::c_int;
+    pub fn vidattr_sp(arg1: *mut SCREEN, arg2: chtype) -> c_int;
 }
 extern "C" {
     pub fn vidputs_sp(
         arg1: *mut SCREEN,
         arg2: chtype,
         arg3: NCURSES_OUTC_sp,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn keybound_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> *mut ::std::os::raw::c_char;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> *mut c_char;
 }
 extern "C" {
     pub fn alloc_pair_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn assume_default_colors_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn define_key_sp(
         arg1: *mut SCREEN,
-        arg2: *const ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn extended_color_content_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_int,
-        arg5: *mut ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: *mut c_int,
+        arg4: *mut c_int,
+        arg5: *mut c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn extended_pair_content_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_int,
-        arg4: *mut ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: *mut c_int,
+        arg4: *mut c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn extended_slk_color_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn get_escdelay_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn get_escdelay_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn find_pair_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn free_pair_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn free_pair_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn init_extended_color_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-        arg5: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+        arg5: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn init_extended_pair_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-        arg4: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+        arg4: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn is_term_resized_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
     ) -> bool;
 }
 extern "C" {
     pub fn key_defined_sp(
         arg1: *mut SCREEN,
-        arg2: *const ::std::os::raw::c_char,
-    ) -> ::std::os::raw::c_int;
+        arg2: *const c_char,
+    ) -> c_int;
 }
 extern "C" {
     pub fn keyok_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
+        arg2: c_int,
         arg3: bool,
-    ) -> ::std::os::raw::c_int;
+    ) -> c_int;
 }
 extern "C" {
     pub fn nofilter_sp(arg1: *mut SCREEN);
@@ -3706,32 +2169,32 @@
 extern "C" {
     pub fn resize_term_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn resizeterm_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn set_escdelay_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int)
-        -> ::std::os::raw::c_int;
+    pub fn set_escdelay_sp(arg1: *mut SCREEN, arg2: c_int)
+        -> c_int;
 }
 extern "C" {
-    pub fn set_tabsize_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn set_tabsize_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
-    pub fn use_default_colors_sp(arg1: *mut SCREEN) -> ::std::os::raw::c_int;
+    pub fn use_default_colors_sp(arg1: *mut SCREEN) -> c_int;
 }
 extern "C" {
     pub fn use_legacy_coding_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub static mut curscr: *mut WINDOW;
@@ -3743,91 +2206,43 @@
     pub static mut stdscr: *mut WINDOW;
 }
 extern "C" {
-    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
+    pub static mut ttytype: [c_char; 0usize];
 }
 extern "C" {
-    pub static mut COLORS: ::std::os::raw::c_int;
+    pub static mut COLORS: c_int;
 }
 extern "C" {
-    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
+    pub static mut COLOR_PAIRS: c_int;
 }
 extern "C" {
-    pub static mut COLS: ::std::os::raw::c_int;
+    pub static mut COLS: c_int;
 }
 extern "C" {
-    pub static mut ESCDELAY: ::std::os::raw::c_int;
+    pub static mut ESCDELAY: c_int;
 }
 extern "C" {
-    pub static mut LINES: ::std::os::raw::c_int;
+    pub static mut LINES: c_int;
 }
 extern "C" {
-    pub static mut TABSIZE: ::std::os::raw::c_int;
+    pub static mut TABSIZE: c_int;
 }
 #[repr(C)]
 #[derive(Debug, Copy, Clone)]
 pub struct MEVENT {
-    pub id: ::std::os::raw::c_short,
-    pub x: ::std::os::raw::c_int,
-    pub y: ::std::os::raw::c_int,
-    pub z: ::std::os::raw::c_int,
+    pub id: c_short,
+    pub x: c_int,
+    pub y: c_int,
+    pub z: c_int,
     pub bstate: mmask_t,
 }
-#[test]
-fn bindgen_test_layout_MEVENT() {
-    assert_eq!(
-        ::std::mem::size_of::<MEVENT>(),
-        20usize,
-        concat!("Size of: ", stringify!(MEVENT))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<MEVENT>(),
-        4usize,
-        concat!("Alignment of ", stringify!(MEVENT))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<MEVENT>())).id as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(MEVENT),
-            "::",
-            stringify!(id)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<MEVENT>())).x as *const _ as usize },
-        4usize,
-        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(x))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<MEVENT>())).y as *const _ as usize },
-        8usize,
-        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(y))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<MEVENT>())).z as *const _ as usize },
-        12usize,
-        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(z))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<MEVENT>())).bstate as *const _ as usize },
-        16usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(MEVENT),
-            "::",
-            stringify!(bstate)
-        )
-    );
-}
 extern "C" {
     pub fn has_mouse() -> bool;
 }
 extern "C" {
-    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
+    pub fn getmouse(arg1: *mut MEVENT) -> c_int;
 }
 extern "C" {
-    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
+    pub fn ungetmouse(arg1: *mut MEVENT) -> c_int;
 }
 extern "C" {
     pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
@@ -3835,25 +2250,25 @@
 extern "C" {
     pub fn wenclose(
         arg1: *const WINDOW,
-        arg2: ::std::os::raw::c_int,
-        arg3: ::std::os::raw::c_int,
+        arg2: c_int,
+        arg3: c_int,
     ) -> bool;
 }
 extern "C" {
-    pub fn mouseinterval(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn mouseinterval(arg1: c_int) -> c_int;
 }
 extern "C" {
     pub fn wmouse_trafo(
         arg1: *const WINDOW,
-        arg2: *mut ::std::os::raw::c_int,
-        arg3: *mut ::std::os::raw::c_int,
+        arg2: *mut c_int,
+        arg3: *mut c_int,
         arg4: bool,
     ) -> bool;
 }
 extern "C" {
     pub fn mouse_trafo(
-        arg1: *mut ::std::os::raw::c_int,
-        arg2: *mut ::std::os::raw::c_int,
+        arg1: *mut c_int,
+        arg2: *mut c_int,
         arg3: bool,
     ) -> bool;
 }
@@ -3861,10 +2276,10 @@
     pub fn has_mouse_sp(arg1: *mut SCREEN) -> bool;
 }
 extern "C" {
-    pub fn getmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT) -> ::std::os::raw::c_int;
+    pub fn getmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT) -> c_int;
 }
 extern "C" {
-    pub fn ungetmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT) -> ::std::os::raw::c_int;
+    pub fn ungetmouse_sp(arg1: *mut SCREEN, arg2: *mut MEVENT) -> c_int;
 }
 extern "C" {
     pub fn mousemask_sp(arg1: *mut SCREEN, arg2: mmask_t, arg3: *mut mmask_t) -> mmask_t;
@@ -3872,120 +2287,58 @@
 extern "C" {
     pub fn mouseinterval_sp(
         arg1: *mut SCREEN,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
     pub fn mcprint(
-        arg1: *mut ::std::os::raw::c_char,
-        arg2: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg1: *mut c_char,
+        arg2: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn has_key(arg1: c_int) -> c_int;
 }
 extern "C" {
-    pub fn has_key_sp(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
+    pub fn has_key_sp(arg1: *mut SCREEN, arg2: c_int) -> c_int;
 }
 extern "C" {
     pub fn mcprint_sp(
         arg1: *mut SCREEN,
-        arg2: *mut ::std::os::raw::c_char,
-        arg3: ::std::os::raw::c_int,
-    ) -> ::std::os::raw::c_int;
+        arg2: *mut c_char,
+        arg3: c_int,
+    ) -> c_int;
 }
 extern "C" {
-    pub fn _tracef(arg1: *const ::std::os::raw::c_char, ...);
+    pub fn _tracef(arg1: *const c_char, ...);
 }
 extern "C" {
-    pub fn _traceattr(arg1: attr_t) -> *mut ::std::os::raw::c_char;
+    pub fn _traceattr(arg1: attr_t) -> *mut c_char;
 }
 extern "C" {
-    pub fn _traceattr2(arg1: ::std::os::raw::c_int, arg2: chtype) -> *mut ::std::os::raw::c_char;
+    pub fn _traceattr2(arg1: c_int, arg2: chtype) -> *mut c_char;
 }
 extern "C" {
-    pub fn _tracechar(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
+    pub fn _tracechar(arg1: c_int) -> *mut c_char;
 }
 extern "C" {
-    pub fn _tracechtype(arg1: chtype) -> *mut ::std::os::raw::c_char;
+    pub fn _tracechtype(arg1: chtype) -> *mut c_char;
 }
 extern "C" {
-    pub fn _tracechtype2(arg1: ::std::os::raw::c_int, arg2: chtype) -> *mut ::std::os::raw::c_char;
+    pub fn _tracechtype2(arg1: c_int, arg2: chtype) -> *mut c_char;
 }
 extern "C" {
-    pub fn trace(arg1: ::std::os::raw::c_uint);
+    pub fn trace(arg1: c_uint);
 }
 extern "C" {
-    pub fn curses_trace(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
+    pub fn curses_trace(arg1: c_uint) -> c_uint;
 }
 extern "C" {
-    pub fn exit_curses(arg1: ::std::os::raw::c_int);
+    pub fn exit_curses(arg1: c_int);
 }
 extern "C" {
-    pub fn unctrl(arg1: chtype) -> *const ::std::os::raw::c_char;
+    pub fn unctrl(arg1: chtype) -> *const c_char;
 }
 extern "C" {
-    pub fn unctrl_sp(arg1: *mut SCREEN, arg2: chtype) -> *const ::std::os::raw::c_char;
-}
-pub type __builtin_va_list = [__va_list_tag; 1usize];
-#[repr(C)]
-#[derive(Debug, Copy, Clone)]
-pub struct __va_list_tag {
-    pub gp_offset: ::std::os::raw::c_uint,
-    pub fp_offset: ::std::os::raw::c_uint,
-    pub overflow_arg_area: *mut ::std::os::raw::c_void,
-    pub reg_save_area: *mut ::std::os::raw::c_void,
-}
-#[test]
-fn bindgen_test_layout___va_list_tag() {
-    assert_eq!(
-        ::std::mem::size_of::<__va_list_tag>(),
-        24usize,
-        concat!("Size of: ", stringify!(__va_list_tag))
-    );
-    assert_eq!(
-        ::std::mem::align_of::<__va_list_tag>(),
-        8usize,
-        concat!("Alignment of ", stringify!(__va_list_tag))
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
-        0usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__va_list_tag),
-            "::",
-            stringify!(gp_offset)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
-        4usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__va_list_tag),
-            "::",
-            stringify!(fp_offset)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
-        8usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__va_list_tag),
-            "::",
-            stringify!(overflow_arg_area)
-        )
-    );
-    assert_eq!(
-        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
-        16usize,
-        concat!(
-            "Offset of field: ",
-            stringify!(__va_list_tag),
-            "::",
-            stringify!(reg_save_area)
-        )
-    );
+    pub fn unctrl_sp(arg1: *mut SCREEN, arg2: chtype) -> *const c_char;
 }
